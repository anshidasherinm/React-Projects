{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","Pages/NewQuote.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","useState","isEntering","setIsEntering","authorInputRef","useRef","textInputRef","Fragment","when","message","location","onFocus","console","log","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","onClick","NewQuote","useHttp","addQuote","sendRequest","status","history","useHistory","useEffect","push","quoteData"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,mB,qBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,2B,6FCKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAK,SAAEH,EAAMI,UAC9C,E,gCCqEeC,EAlEG,SAACL,GACjB,MAAoCM,oBAAS,GAAM,mBAA5CC,EAAU,KAAEC,EAAa,KAC1BC,EAAiBC,mBACjBC,EAAeD,mBAuBrB,OACE,eAAC,IAAME,SAAQ,WAEb,cAAC,IAAM,CACLC,KAAMN,EACNO,QAAS,SAACC,GAAQ,MAChB,oEAAoE,IAGxE,cAAC,EAAI,UACH,uBACEC,QArBmB,WACzBC,QAAQC,IAAI,UACZV,GAAc,EAChB,EAmBQP,UAAWC,IAAQiB,KACnBC,SAlCR,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBd,EAAee,QAAQC,MACvCC,EAAcf,EAAaa,QAAQC,MAIzCzB,EAAM2B,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,GAClD,EAyBoC,UAE3B1B,EAAM8B,WACL,qBAAK7B,UAAWC,IAAQ6B,QAAQ,SAC9B,cAACC,EAAA,EAAc,MAInB,sBAAK/B,UAAWC,IAAQ+B,QAAQ,UAC9B,uBAAOC,QAAQ,SAAQ,oBACvB,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAK5B,OAEtC,sBAAKR,UAAWC,IAAQ+B,QAAQ,UAC9B,uBAAOC,QAAQ,OAAM,kBACrB,0BAAUE,GAAG,OAAOE,KAAK,IAAID,IAAK1B,OAEpC,qBAAKV,UAAWC,IAAQqC,QAAQ,SAC9B,wBAAQC,QAjCY,WAC5BhC,GAAc,EAChB,EA+BkDP,UAAU,MAAK,gCAQnE,E,gBCtCewC,UA5BE,WACf,MAAgCC,YAAQC,KAAhCC,EAAW,EAAXA,YAAaC,EAAM,EAANA,OACfC,EAAUC,cAEhBC,qBAAU,WACO,cAAXH,GACFC,EAAQG,KAAK,SAEjB,GAAG,CAACJ,EAAQC,IASZ,OACE,eAAC,IAAMlC,SAAQ,WACb,gDACA,cAAC,EAAS,CACRkB,UAAsB,YAAXe,EACXlB,WAbkB,SAACuB,GACvBN,EAAYM,GACZjC,QAAQC,IAAIgC,GACZJ,EAAQG,KAAK,UAIf,MAUF,C","file":"static/js/4.c8e673a1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__K30rU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__2Ki4-\",\"loading\":\"QuoteForm_loading__1rU_D\",\"control\":\"QuoteForm_control__bVS1r\",\"actions\":\"QuoteForm_actions__fz6wO\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { useRef, useState } from \"react\";\n\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\nimport { Prompt } from \"react-router-dom\";\nimport React from \"react\";\nconst QuoteForm = (props) => {\n  const [isEntering, setIsEntering] = useState(false);\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  const formFocusedHandler = () => {\n    console.log(\"Focus!\");\n    setIsEntering(true);\n  };\n\n  //important thing: without this,when the form is filled, and when accidently toches form after ,the form cannot be submitted even thoigh entered correctlty\n  //this function is to prevent that\n  const finishEnteringHandler = () => {\n    setIsEntering(false);\n  };\n  return (\n    <React.Fragment>\n      {/* prompt makes sure when to show the elements */}\n      <Prompt\n        when={isEntering}\n        message={(location) =>\n          \"Are you sure yu want to leave? All your entered data will be lost!\"\n        }\n      />\n      <Card>\n        <form\n          onFocus={formFocusedHandler}\n          className={classes.form}\n          onSubmit={submitFormHandler}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor=\"author\">Author</label>\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"text\">Text</label>\n            <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button onClick={finishEnteringHandler} className=\"btn\">\n              Add Quote\n            </button>\n          </div>\n        </form>\n      </Card>\n    </React.Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import React, { useEffect } from \"react\";\r\nimport QuoteForm from \"../components/quotes/QuoteForm\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { addQuote } from \"../lib/api\";\r\nconst NewQuote = () => {\r\n  const { sendRequest, status } = useHttp(addQuote);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    if (status === \"completed\") {\r\n      history.push(\"/quote\");\r\n    }\r\n  }, [status, history]);\r\n  const addQuoteHandler = (quoteData) => {\r\n    sendRequest(quoteData);\r\n    console.log(quoteData);\r\n    history.push(\"/quotes\");\r\n\r\n    //the successfull submission of the from must make the page to go back tp a different page\r\n    //for that we use useHistory hook\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <h1>New Quote Page</h1>\r\n      <QuoteForm\r\n        isLoading={status === \"pending\"}\r\n        onAddQuote={addQuoteHandler}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default NewQuote;\r\n"],"sourceRoot":""}