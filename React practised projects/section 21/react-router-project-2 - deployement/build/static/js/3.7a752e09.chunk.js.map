{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","Pages/QuoteDetails.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","qouteId","quoteId","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHander","useCallback","length","onClick","HighlightedQuote","quote","author","QouteDetails","match","useRouteMatch","getSingleQuote","loadedQuote","console","log","Fragment","path","exact","to","url"],"mappings":"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","file":"static/js/3.7a752e09.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__3deQB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__3Di4d\",\"loading\":\"NewCommentForm_loading__2g5JE\",\"control\":\"NewCommentForm_control__8azh3\",\"actions\":\"NewCommentForm_actions__FmOxF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__9ignM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__2NqDs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__1uFIf\"};","import { useRef, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  // const params = useParams();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n  const { onAddedComment } = props;\n\n  useEffect(\n    () => {\n      if (status === \"completed\" && !error) {\n        onAddedComment();\n      }\n    },\n    [status, error],\n    onAddedComment\n  );\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    const enteredText = commentTextRef.current.value;\n    sendRequest({\n      commentData: {\n        text: enteredText,\n      },\n      qouteId: props.quoteId,\n    });\n\n    // optional: Could validate here\n\n    // send comment to server\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from \"./CommentItem.module.css\";\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text} </p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"../comments/CommentsList\";\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const { qouteId } = params;\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(qouteId);\n  }, [qouteId, sendRequest]);\n\n  const addedCommentHander = useCallback(() => {\n    sendRequest(qouteId);\n  }, [sendRequest, qouteId]);\n\n  let comments;\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className=\"centered\">No comments were added yet</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm qouteId={qouteId} onAddedComment={addedCommentHander} />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from \"./HighlightedQuote.module.css\";\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author} </figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import React, { useEffect } from \"react\";\r\nimport { Route, useParams, Link, useRouteMatch } from \"react-router-dom\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HighLightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nconst DUMMY_QUOTES = [\r\n  { id: \"q1\", author: \"Max\", text: \"Learning React is fun!\" },\r\n  { id: \"q2\", author: \"Anshida\", text: \"Learning React is great!\" },\r\n];\r\n\r\nconst QouteDetails = () => {\r\n  const params = useParams();\r\n  const { quoteId } = params;\r\n  const match = useRouteMatch();\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuote,\r\n    error,\r\n  } = useHttp(getSingleQuote, true);\r\n  console.log(match); //{path: '/quotes/:quoteId', url: '/quotes/q2', isExact: false, params: {â€¦}}\r\n  // const quote = DUMMY_QUOTES.find((quote) => quote.id === params.quoteId);\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"centered focused\">{error}</p>;\r\n  }\r\n\r\n  if (!loadedQuote.text) {\r\n    return <p>No quote found</p>;\r\n  }\r\n\r\n  // if (!quote) {\r\n  //   return <p>No quote found!</p>;\r\n  // }\r\n\r\n  return (\r\n    //dynamically making the url\r\n    <React.Fragment>\r\n      <h1>Quote Deatils page</h1>\r\n      <HighLightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n      <Route path={match.path} exact>\r\n        <div className=\"centered\">\r\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n            Load Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n\r\n      {/* <p className=\"centered\">{quoteId}</p> */}\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments />\r\n      </Route>\r\n    </React.Fragment>\r\n    // <React.Fragment>\r\n    //   <h1>Quote Deatils page</h1>\r\n    //   <HighLightedQuote text={quote.text} author={quote.author} />\r\n    //   <Route path={`/quotes/${params.quoteId}`} exact>\r\n    //     <div className=\"centered\">\r\n    //       <Link className=\"btn--flat\" to={`/quotes/${params.quoteId}/comments`}>\r\n    //         Load Comments\r\n    //       </Link>\r\n    //     </div>\r\n    //   </Route>\r\n\r\n    //   <p className=\"centered\">{params.quoteId}</p>\r\n    //   <Route path={`/quotes/${params.quoteId}/comments`}>\r\n    //     <Comments />\r\n    //   </Route>\r\n    // </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default QouteDetails;\r\n"],"sourceRoot":""}