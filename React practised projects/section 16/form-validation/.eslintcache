[{"D:\\React projects\\form-validation\\src\\index.js":"1","D:\\React projects\\form-validation\\src\\App.js":"2","D:\\React projects\\form-validation\\src\\components\\SimpleInput.js":"3","D:\\React projects\\form-validation\\src\\hooks\\use-input.js":"4","D:\\React projects\\form-validation\\src\\components\\BasicForm.js":"5"},{"size":179,"mtime":1668060052080,"results":"6","hashOfConfig":"7"},{"size":244,"mtime":1668083446003,"results":"8","hashOfConfig":"7"},{"size":4823,"mtime":1668085276646,"results":"9","hashOfConfig":"7"},{"size":1608,"mtime":1668141066941,"results":"10","hashOfConfig":"7"},{"size":3176,"mtime":1668085257212,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"53eb5e",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"14"},"D:\\React projects\\form-validation\\src\\index.js",[],["26","27"],"D:\\React projects\\form-validation\\src\\App.js",["28"],"import BasicForm from \"./components/BasicForm\";\nimport SimpleInput from \"./components/SimpleInput\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      {/* <SimpleInput /> */}\n      <BasicForm />\n    </div>\n  );\n}\n\nexport default App;\n","D:\\React projects\\form-validation\\src\\components\\SimpleInput.js",["29","30","31"],"import { useState, useRef, useEffect } from \"react\";\nimport useInput from \"../hooks/use-input\";\n\nconst SimpleInput = (props) => {\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetNameInput,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmailInput,\n  } = useInput((value) => value.includes(\"@\"));\n\n  // const nameInputRef = useRef(); //with ref instand validation is not possible\n\n  // const [formIsValid, setFormIsValid] = useState(false);\n  // const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  // const [enteredName, setEnteredName] = useState(\"\");\n  // const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  // const [enteredEmail, setEnteredEmail] = useState(\"\");\n  // const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  // useEffect(() => {\n  //   if (enteredNameIsValid) {\n  //     console.log(\"Name Input is valid\");\n  //   }\n  // }, [enteredNameIsValid]);\n\n  // const enteredNameIsValid = enteredName.trim() != \"\";\n  // const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n  // const enteredEmailIsValid = enteredEmail.includes(\"@\");\n  // const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n  // useEffect(() => {\n  // if (enteredNameIsValid) {\n  //   setFormIsValid(true);\n  // } else {\n  //   setFormIsValid(false);\n  // }\n  // }, [enteredNameIsValid]);\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n  // const nameInputChangeHandler = (event) => {\n  //   setEnteredName(event.target.value);\n\n  //   // if (event.target.value.trim() !== \"\") {\n  //   //   setEnteredNameIsValid(true);\n  //   // }\n  // };\n  // const emailInputChangeHandler = (event) => {\n  //   setEnteredEmail(event.target.value);\n  // };\n\n  // const nameInputBlurHandler = (event) => {\n  //   setEnteredNameTouched(true);\n  //   // if (enteredName.trim() !== \"\") {\n  //   //   setEnteredNameIsValid(true);\n  //   // }\n  // };\n  // const emailInputBlurHandler = (event) => {\n  //   setEnteredEmailTouched(true);\n  // };\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n    // setEnteredNameTouched(true);\n    // setEnteredEmail(true);\n\n    if (!formIsValid) {\n      // setEnteredNameIsValid(false);\n      return;\n    }\n    // if (!enteredEmailIsValid) {\n    //   // setEnteredNameIsValid(false);\n    //   return;\n    // }\n    // setEnteredNameIsValid(true);\n    console.log(enteredName);\n    console.log(enteredEmail);\n    // setEnteredName(\"\");\n    // setEnteredNameTouched(false);\n    resetNameInput();\n    resetEmailInput();\n    // setEnteredEmail(\"\");\n    // setEnteredEmailTouched(false);\n\n    //below codes are pf the ref\n    // const enteredValue = nameInputRef.current.value;\n    // console.log(enteredValue);\n    // nameInputRef.current.value ='';=>NOT IDEAL , DONT USE THIS: DONT MANIPULATE THE DOM\n  };\n\n  // const nameInputClasses = nameInputIsInvalid\n  //   ? \"form-control invalid\"\n  //   : \"form-control\";\n  const nameInputClasses = nameInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  // const emailInputClasses = emailInputIsInvalid\n  //   ? \"form-control invalid\"\n  //   : \"form-control\";\n  const emailInputClasses = emailInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          // ref={nameInputRef}\n          type=\"text\"\n          id=\"name\"\n          value={enteredName}\n          // onChange={nameInputChangeHandler}\n          // onBlur={nameInputBlurHandler}\n          onChange={nameChangeHandler}\n          onBlur={nameBlurHandler}\n        />\n        {/* {nameInputIsInvalid && ( */}\n        {nameInputHasError && (\n          <p className=\"error-text\">Name must not be empty</p>\n        )}\n      </div>\n\n      <div className={emailInputClasses}>\n        <label htmlFor=\"email\">Your E-mail</label>\n        <input\n          // ref={nameInputRef}\n          type=\"email\"\n          id=\"email\"\n          value={enteredEmail}\n          onChange={emailChangeHandler}\n          onBlur={emailBlurHandler}\n        />\n        {emailInputHasError && (\n          <p className=\"error-text\">Please Enter a valid email</p>\n        )}\n      </div>\n\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n","D:\\React projects\\form-validation\\src\\hooks\\use-input.js",["32"],"D:\\React projects\\form-validation\\src\\components\\BasicForm.js",["33"],"import useInput from \"../hooks/use-input\";\n\nconst isNotEmpty = (value) => value.trim() != \"\";\nconst BasicForm = (props) => {\n  const {\n    value: enteredFirstName,\n    isValid: enteredFirstNameIsValid,\n    hasError: firstNameInputHasError,\n    valueChangeHandler: firstNameChangeHandler,\n    inputBlurHandler: firstNameBlurHandler,\n    reset: resetFirstNameInput,\n  } = useInput(isNotEmpty);\n\n  const {\n    value: enteredLastName,\n    isValid: enteredLastNameIsValid,\n    hasError: lastNameInputHasError,\n    valueChangeHandler: lastNameChangeHandler,\n    inputBlurHandler: lastNameBlurHandler,\n    reset: resetLastNameInput,\n  } = useInput(isNotEmpty);\n\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmailInput,\n  } = useInput((value) => value.includes(\"@\"));\n\n  let formIsValid = false;\n\n  if (\n    enteredFirstNameIsValid &&\n    enteredLastNameIsValid &&\n    enteredEmailIsValid\n  ) {\n    formIsValid = true;\n  }\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n    if (!formIsValid) {\n      return;\n    }\n    console.log(enteredFirstName);\n    console.log(enteredLastName);\n    console.log(enteredEmail);\n    resetFirstNameInput();\n    resetLastNameInput();\n    resetEmailInput();\n  };\n\n  const firstNameInputClasses = firstNameInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const lastNameInputClasses = lastNameInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const emailInputClasses = emailInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className=\"control-group\">\n        <div className={firstNameInputClasses}>\n          <label htmlFor=\"name\">First Name</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            value={enteredFirstName}\n            onChange={firstNameChangeHandler}\n            onBlur={firstNameBlurHandler}\n          />\n          {firstNameInputHasError && (\n            <p className=\"error-text\">First Name must not be empty</p>\n          )}\n        </div>\n        <div className={lastNameInputClasses}>\n          <label htmlFor=\"name\">Last Name</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            value={enteredLastName}\n            onChange={lastNameChangeHandler}\n            onBlur={lastNameBlurHandler}\n          />\n          {lastNameInputHasError && (\n            <p className=\"error-text\">Last Name must not be empty</p>\n          )}\n        </div>\n      </div>\n      <div className={emailInputClasses}>\n        <label htmlFor=\"name\">E-Mail Address</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          value={enteredEmail}\n          onChange={emailChangeHandler}\n          onBlur={emailBlurHandler}\n        />\n        {emailInputHasError && <p className=\"error-text\">Email is nor valid</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default BasicForm;\n",{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":2,"column":8,"nodeType":"40","messageId":"41","endLine":2,"endColumn":19},{"ruleId":"38","severity":1,"message":"42","line":1,"column":10,"nodeType":"40","messageId":"41","endLine":1,"endColumn":18},{"ruleId":"38","severity":1,"message":"43","line":1,"column":20,"nodeType":"40","messageId":"41","endLine":1,"endColumn":26},{"ruleId":"38","severity":1,"message":"44","line":1,"column":28,"nodeType":"40","messageId":"41","endLine":1,"endColumn":37},{"ruleId":"38","severity":1,"message":"42","line":1,"column":10,"nodeType":"40","messageId":"41","endLine":1,"endColumn":18},{"ruleId":"45","severity":1,"message":"46","line":3,"column":44,"nodeType":"47","messageId":"48","endLine":3,"endColumn":46},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"no-unused-vars","'SimpleInput' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useRef' is defined but never used.","'useEffect' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]